
STKbd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000024  00800100  00800100  0000053e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000314  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000187  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000020f  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000148  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ac  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f9  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_1>
   8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 01 	call	0x220	; 0x220 <main>
  9e:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:

static clock_time_t time;

/* Overflow interrupt */
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
	time += 1;
  b8:	80 91 00 01 	lds	r24, 0x0100
  bc:	90 91 01 01 	lds	r25, 0x0101
  c0:	a0 91 02 01 	lds	r26, 0x0102
  c4:	b0 91 03 01 	lds	r27, 0x0103
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 00 01 	sts	0x0100, r24
  d2:	90 93 01 01 	sts	0x0101, r25
  d6:	a0 93 02 01 	sts	0x0102, r26
  da:	b0 93 03 01 	sts	0x0103, r27
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <clock_init>:

void clock_init()
{
	time = 0;
  f0:	10 92 00 01 	sts	0x0100, r1
  f4:	10 92 01 01 	sts	0x0101, r1
  f8:	10 92 02 01 	sts	0x0102, r1
  fc:	10 92 03 01 	sts	0x0103, r1
	/* Enable compare A interrupt */
	TIMSK1 |= _BV(OCIE1A);
 100:	ef e6       	ldi	r30, 0x6F	; 111
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	/* f_cpu / 1024 and CTC mode */
//	TCCR1B |= _BV(CS12) | _BV(CS10) | _BV(WGM12);
//	OCR1A = 6104; /* Magical constant - 2Hz */

	/* f_cpu / 256 and CTC mode */
	TCCR1B |= _BV(CS12) | _BV(WGM12);
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	80 83       	st	Z, r24
//	OCR1A = 6250; /* Magical constant - 10Hz - 100 ms */
	OCR1A = 125; /* Magical constant - 50Hz - 2 ms */
 114:	8d e7       	ldi	r24, 0x7D	; 125
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 89 00 	sts	0x0089, r25
 11c:	80 93 88 00 	sts	0x0088, r24
 120:	08 95       	ret

00000122 <clock_time>:
}

clock_time_t clock_time()
{
	return time;
 122:	60 91 00 01 	lds	r22, 0x0100
 126:	70 91 01 01 	lds	r23, 0x0101
 12a:	80 91 02 01 	lds	r24, 0x0102
 12e:	90 91 03 01 	lds	r25, 0x0103
}
 132:	08 95       	ret

00000134 <__vector_1>:

struct timer timer_c2;
struct timer timer_t2;	// пауза между стробами


ISR(INT0_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
		PORTB |= _BV(PORTB5);
		} else {
		PORTB &= ~_BV(PORTB5);
	}
*/
	set_strob12_stop;
 156:	88 b1       	in	r24, 0x08	; 8
 158:	8c 7f       	andi	r24, 0xFC	; 252
 15a:	88 b9       	out	0x08, r24	; 8
	timer_set( &timer_t1, STROB_PAUSE);
 15c:	8a ef       	ldi	r24, 0xFA	; 250
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a0 e0       	ldi	r26, 0x00	; 0
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	80 93 10 01 	sts	0x0110, r24
 168:	90 93 11 01 	sts	0x0111, r25
 16c:	a0 93 12 01 	sts	0x0112, r26
 170:	b0 93 13 01 	sts	0x0113, r27
 174:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 178:	60 93 0c 01 	sts	0x010C, r22
 17c:	70 93 0d 01 	sts	0x010D, r23
 180:	80 93 0e 01 	sts	0x010E, r24
 184:	90 93 0f 01 	sts	0x010F, r25
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_2>:

ISR(INT1_vect){
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
		PORTB |= _BV(PORTB5);
		} else {
		PORTB &= ~_BV(PORTB5);
	}
*/
	set_strob34_stop;
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	83 7f       	andi	r24, 0xF3	; 243
 1d0:	88 b9       	out	0x08, r24	; 8
	timer_set( &timer_t2, STROB_PAUSE);
 1d2:	8a ef       	ldi	r24, 0xFA	; 250
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	a0 e0       	ldi	r26, 0x00	; 0
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	80 93 08 01 	sts	0x0108, r24
 1de:	90 93 09 01 	sts	0x0109, r25
 1e2:	a0 93 0a 01 	sts	0x010A, r26
 1e6:	b0 93 0b 01 	sts	0x010B, r27
 1ea:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 1ee:	60 93 04 01 	sts	0x0104, r22
 1f2:	70 93 05 01 	sts	0x0105, r23
 1f6:	80 93 06 01 	sts	0x0106, r24
 1fa:	90 93 07 01 	sts	0x0107, r25
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <main>:

int main(void)
{
	
	// input - keys (4-7) and Rotation sensors (2-3)
	DDRD = (0<<PORTD2) | (0<<PORTD3) | (0<<PORTD4) | (0<<PORTD5) | (0<<PORTD6) | (0<<PORTD7);
 220:	1a b8       	out	0x0a, r1	; 10
	PORTD = (0<<PORTD2) | (0<<PORTD3) | (0<<PORTD4) | (0<<PORTD5) | (0<<PORTD6) | (0<<PORTD7);
 222:	1b b8       	out	0x0b, r1	; 11
	
	EICRA |= _BV(ISC11) | _BV(ISC01);	// задний фронт
 224:	e9 e6       	ldi	r30, 0x69	; 105
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8a 60       	ori	r24, 0x0A	; 10
 22c:	80 83       	st	Z, r24
	EIMSK = _BV(INT1) | _BV(INT0);
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	8d bb       	out	0x1d, r24	; 29
	
	// output - 0-3 strobs
	DDRC = (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3);
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 236:	18 b8       	out	0x08, r1	; 8
		
	// LED - PORTB5 and rotation sensors: RS1 - PORTB0, RS2 - PORTB1
	DDRB |= (1<<PORTB5) | (0<<PORTB0) | (0<<PORTB1);
 238:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0;
 23a:	15 b8       	out	0x05, r1	; 5
	//PORTB &= ~(1<<PORTB5);			// запишем 0

//	uart_init();

	
	clock_init();
 23c:	0e 94 78 00 	call	0xf0	; 0xf0 <clock_init>
	timer_set( &timer_t1, STROB_PAUSE);	
 240:	0f 2e       	mov	r0, r31
 242:	fa ef       	ldi	r31, 0xFA	; 250
 244:	cf 2e       	mov	r12, r31
 246:	d1 2c       	mov	r13, r1
 248:	e1 2c       	mov	r14, r1
 24a:	f1 2c       	mov	r15, r1
 24c:	f0 2d       	mov	r31, r0
 24e:	c0 92 10 01 	sts	0x0110, r12
 252:	d0 92 11 01 	sts	0x0111, r13
 256:	e0 92 12 01 	sts	0x0112, r14
 25a:	f0 92 13 01 	sts	0x0113, r15
 25e:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 262:	60 93 0c 01 	sts	0x010C, r22
 266:	70 93 0d 01 	sts	0x010D, r23
 26a:	80 93 0e 01 	sts	0x010E, r24
 26e:	90 93 0f 01 	sts	0x010F, r25
	timer_set( &timer_t2, STROB_PAUSE);
 272:	c0 92 08 01 	sts	0x0108, r12
 276:	d0 92 09 01 	sts	0x0109, r13
 27a:	e0 92 0a 01 	sts	0x010A, r14
 27e:	f0 92 0b 01 	sts	0x010B, r15
 282:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 286:	60 93 04 01 	sts	0x0104, r22
 28a:	70 93 05 01 	sts	0x0105, r23
 28e:	80 93 06 01 	sts	0x0106, r24
 292:	90 93 07 01 	sts	0x0107, r25
	
	sei();
 296:	78 94       	sei
			if( timer_expired( &timer_c1 ) ) {				// может слишком долго генерируем?
				set_strob12_stop;
				timer_set( &timer_t1, STROB_PAUSE);
			}
		} else {											// строба нет, значит можно опрашивать клавиши
			if (timer_expired(&timer_t1)) {
 298:	0f 2e       	mov	r0, r31
 29a:	fc e0       	ldi	r31, 0x0C	; 12
 29c:	cf 2e       	mov	r12, r31
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	df 2e       	mov	r13, r31
 2a2:	f0 2d       	mov	r31, r0
 2a4:	0f 2e       	mov	r0, r31
 2a6:	f0 e1       	ldi	r31, 0x10	; 16
 2a8:	ef 2e       	mov	r14, r31
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	ff 2e       	mov	r15, r31
 2ae:	f0 2d       	mov	r31, r0
				if (key1_pressed ) {
					timer_set( &timer_c1, STROB_TIMEOUT);
					set_strob1_run;
				} else if (key2_pressed) {
					timer_set( &timer_c1, STROB_TIMEOUT);
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f0 e2       	ldi	r31, 0x20	; 32
 2b4:	af 2e       	mov	r10, r31
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	bf 2e       	mov	r11, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	0f 2e       	mov	r0, r31
 2be:	fc e1       	ldi	r31, 0x1C	; 28
 2c0:	8f 2e       	mov	r8, r31
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	9f 2e       	mov	r9, r31
 2c6:	f0 2d       	mov	r31, r0
			if( timer_expired( &timer_c2 ) ) {				// может слишком долго генерируем?
				set_strob34_stop;
				timer_set( &timer_t2, STROB_PAUSE);
			}
		} else {											// строба нет, значит можно опрашивать клавиши
			if (timer_expired(&timer_t2)) {
 2c8:	04 e0       	ldi	r16, 0x04	; 4
 2ca:	11 e0       	ldi	r17, 0x01	; 1
 2cc:	c8 e0       	ldi	r28, 0x08	; 8
 2ce:	d1 e0       	ldi	r29, 0x01	; 1
				if (key3_pressed ) {
					timer_set( &timer_c2, STROB_TIMEOUT);
					set_strob3_run;
					} else if (key4_pressed) {
					timer_set( &timer_c2, STROB_TIMEOUT);
 2d0:	0f 2e       	mov	r0, r31
 2d2:	f8 e1       	ldi	r31, 0x18	; 24
 2d4:	6f 2e       	mov	r6, r31
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	7f 2e       	mov	r7, r31
 2da:	f0 2d       	mov	r31, r0
	sei();

    while(1)
    {
		// первый канал
		if( strob12_runing ){								// значит находимся в процессе генерации строба
 2dc:	86 b1       	in	r24, 0x06	; 6
 2de:	83 70       	andi	r24, 0x03	; 3
 2e0:	81 f1       	breq	.+96     	; 0x342 <main+0x122>
			if( timer_expired( &timer_c1 ) ) {				// может слишком долго генерируем?
 2e2:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 2e6:	d4 01       	movw	r26, r8
 2e8:	2d 91       	ld	r18, X+
 2ea:	3d 91       	ld	r19, X+
 2ec:	4d 91       	ld	r20, X+
 2ee:	5c 91       	ld	r21, X
 2f0:	1b 01       	movw	r2, r22
 2f2:	2c 01       	movw	r4, r24
 2f4:	22 1a       	sub	r2, r18
 2f6:	33 0a       	sbc	r3, r19
 2f8:	44 0a       	sbc	r4, r20
 2fa:	55 0a       	sbc	r5, r21
 2fc:	f5 01       	movw	r30, r10
 2fe:	80 81       	ld	r24, Z
 300:	91 81       	ldd	r25, Z+1	; 0x01
 302:	a2 81       	ldd	r26, Z+2	; 0x02
 304:	b3 81       	ldd	r27, Z+3	; 0x03
 306:	28 16       	cp	r2, r24
 308:	39 06       	cpc	r3, r25
 30a:	4a 06       	cpc	r4, r26
 30c:	5b 06       	cpc	r5, r27
 30e:	08 f4       	brcc	.+2      	; 0x312 <main+0xf2>
 310:	60 c0       	rjmp	.+192    	; 0x3d2 <main+0x1b2>
				set_strob12_stop;
 312:	88 b1       	in	r24, 0x08	; 8
 314:	8c 7f       	andi	r24, 0xFC	; 252
 316:	88 b9       	out	0x08, r24	; 8
				timer_set( &timer_t1, STROB_PAUSE);
 318:	0f 2e       	mov	r0, r31
 31a:	fa ef       	ldi	r31, 0xFA	; 250
 31c:	2f 2e       	mov	r2, r31
 31e:	31 2c       	mov	r3, r1
 320:	41 2c       	mov	r4, r1
 322:	51 2c       	mov	r5, r1
 324:	f0 2d       	mov	r31, r0
 326:	d7 01       	movw	r26, r14
 328:	2d 92       	st	X+, r2
 32a:	3d 92       	st	X+, r3
 32c:	4d 92       	st	X+, r4
 32e:	5c 92       	st	X, r5
 330:	13 97       	sbiw	r26, 0x03	; 3
 332:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 336:	f6 01       	movw	r30, r12
 338:	60 83       	st	Z, r22
 33a:	71 83       	std	Z+1, r23	; 0x01
 33c:	82 83       	std	Z+2, r24	; 0x02
 33e:	93 83       	std	Z+3, r25	; 0x03
 340:	48 c0       	rjmp	.+144    	; 0x3d2 <main+0x1b2>
			}
		} else {											// строба нет, значит можно опрашивать клавиши
			if (timer_expired(&timer_t1)) {
 342:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 346:	d6 01       	movw	r26, r12
 348:	2d 91       	ld	r18, X+
 34a:	3d 91       	ld	r19, X+
 34c:	4d 91       	ld	r20, X+
 34e:	5c 91       	ld	r21, X
 350:	1b 01       	movw	r2, r22
 352:	2c 01       	movw	r4, r24
 354:	22 1a       	sub	r2, r18
 356:	33 0a       	sbc	r3, r19
 358:	44 0a       	sbc	r4, r20
 35a:	55 0a       	sbc	r5, r21
 35c:	f7 01       	movw	r30, r14
 35e:	80 81       	ld	r24, Z
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	a2 81       	ldd	r26, Z+2	; 0x02
 364:	b3 81       	ldd	r27, Z+3	; 0x03
 366:	28 16       	cp	r2, r24
 368:	39 06       	cpc	r3, r25
 36a:	4a 06       	cpc	r4, r26
 36c:	5b 06       	cpc	r5, r27
 36e:	88 f1       	brcs	.+98     	; 0x3d2 <main+0x1b2>
				if (key1_pressed ) {
 370:	4c 9b       	sbis	0x09, 4	; 9
 372:	17 c0       	rjmp	.+46     	; 0x3a2 <main+0x182>
					timer_set( &timer_c1, STROB_TIMEOUT);
 374:	0f 2e       	mov	r0, r31
 376:	f2 e5       	ldi	r31, 0x52	; 82
 378:	2f 2e       	mov	r2, r31
 37a:	f3 e0       	ldi	r31, 0x03	; 3
 37c:	3f 2e       	mov	r3, r31
 37e:	41 2c       	mov	r4, r1
 380:	51 2c       	mov	r5, r1
 382:	f0 2d       	mov	r31, r0
 384:	d5 01       	movw	r26, r10
 386:	2d 92       	st	X+, r2
 388:	3d 92       	st	X+, r3
 38a:	4d 92       	st	X+, r4
 38c:	5c 92       	st	X, r5
 38e:	13 97       	sbiw	r26, 0x03	; 3
 390:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 394:	f4 01       	movw	r30, r8
 396:	60 83       	st	Z, r22
 398:	71 83       	std	Z+1, r23	; 0x01
 39a:	82 83       	std	Z+2, r24	; 0x02
 39c:	93 83       	std	Z+3, r25	; 0x03
					set_strob1_run;
 39e:	40 9a       	sbi	0x08, 0	; 8
 3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <main+0x1b2>
				} else if (key2_pressed) {
 3a2:	4d 9b       	sbis	0x09, 5	; 9
 3a4:	16 c0       	rjmp	.+44     	; 0x3d2 <main+0x1b2>
					timer_set( &timer_c1, STROB_TIMEOUT);
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f2 e5       	ldi	r31, 0x52	; 82
 3aa:	2f 2e       	mov	r2, r31
 3ac:	f3 e0       	ldi	r31, 0x03	; 3
 3ae:	3f 2e       	mov	r3, r31
 3b0:	41 2c       	mov	r4, r1
 3b2:	51 2c       	mov	r5, r1
 3b4:	f0 2d       	mov	r31, r0
 3b6:	d5 01       	movw	r26, r10
 3b8:	2d 92       	st	X+, r2
 3ba:	3d 92       	st	X+, r3
 3bc:	4d 92       	st	X+, r4
 3be:	5c 92       	st	X, r5
 3c0:	13 97       	sbiw	r26, 0x03	; 3
 3c2:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 3c6:	f4 01       	movw	r30, r8
 3c8:	60 83       	st	Z, r22
 3ca:	71 83       	std	Z+1, r23	; 0x01
 3cc:	82 83       	std	Z+2, r24	; 0x02
 3ce:	93 83       	std	Z+3, r25	; 0x03
					set_strob2_run;
 3d0:	41 9a       	sbi	0x08, 1	; 8
				}
			}
		} // закончили с первым каналом
		// второй канал
		if( strob34_runing ){								// значит находимся в процессе генерации строба
 3d2:	86 b1       	in	r24, 0x06	; 6
 3d4:	8c 70       	andi	r24, 0x0C	; 12
 3d6:	81 f1       	breq	.+96     	; 0x438 <main+0x218>
			if( timer_expired( &timer_c2 ) ) {				// может слишком долго генерируем?
 3d8:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 3dc:	a4 e1       	ldi	r26, 0x14	; 20
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	2d 91       	ld	r18, X+
 3e2:	3d 91       	ld	r19, X+
 3e4:	4d 91       	ld	r20, X+
 3e6:	5c 91       	ld	r21, X
 3e8:	1b 01       	movw	r2, r22
 3ea:	2c 01       	movw	r4, r24
 3ec:	22 1a       	sub	r2, r18
 3ee:	33 0a       	sbc	r3, r19
 3f0:	44 0a       	sbc	r4, r20
 3f2:	55 0a       	sbc	r5, r21
 3f4:	f3 01       	movw	r30, r6
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	a2 81       	ldd	r26, Z+2	; 0x02
 3fc:	b3 81       	ldd	r27, Z+3	; 0x03
 3fe:	28 16       	cp	r2, r24
 400:	39 06       	cpc	r3, r25
 402:	4a 06       	cpc	r4, r26
 404:	5b 06       	cpc	r5, r27
 406:	08 f4       	brcc	.+2      	; 0x40a <main+0x1ea>
 408:	69 cf       	rjmp	.-302    	; 0x2dc <main+0xbc>
				set_strob34_stop;
 40a:	88 b1       	in	r24, 0x08	; 8
 40c:	83 7f       	andi	r24, 0xF3	; 243
 40e:	88 b9       	out	0x08, r24	; 8
				timer_set( &timer_t2, STROB_PAUSE);
 410:	0f 2e       	mov	r0, r31
 412:	fa ef       	ldi	r31, 0xFA	; 250
 414:	2f 2e       	mov	r2, r31
 416:	31 2c       	mov	r3, r1
 418:	41 2c       	mov	r4, r1
 41a:	51 2c       	mov	r5, r1
 41c:	f0 2d       	mov	r31, r0
 41e:	28 82       	st	Y, r2
 420:	39 82       	std	Y+1, r3	; 0x01
 422:	4a 82       	std	Y+2, r4	; 0x02
 424:	5b 82       	std	Y+3, r5	; 0x03
 426:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 42a:	d8 01       	movw	r26, r16
 42c:	6d 93       	st	X+, r22
 42e:	7d 93       	st	X+, r23
 430:	8d 93       	st	X+, r24
 432:	9c 93       	st	X, r25
 434:	13 97       	sbiw	r26, 0x03	; 3
 436:	52 cf       	rjmp	.-348    	; 0x2dc <main+0xbc>
			}
		} else {											// строба нет, значит можно опрашивать клавиши
			if (timer_expired(&timer_t2)) {
 438:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 43c:	f8 01       	movw	r30, r16
 43e:	20 81       	ld	r18, Z
 440:	31 81       	ldd	r19, Z+1	; 0x01
 442:	42 81       	ldd	r20, Z+2	; 0x02
 444:	53 81       	ldd	r21, Z+3	; 0x03
 446:	1b 01       	movw	r2, r22
 448:	2c 01       	movw	r4, r24
 44a:	22 1a       	sub	r2, r18
 44c:	33 0a       	sbc	r3, r19
 44e:	44 0a       	sbc	r4, r20
 450:	55 0a       	sbc	r5, r21
 452:	88 81       	ld	r24, Y
 454:	99 81       	ldd	r25, Y+1	; 0x01
 456:	aa 81       	ldd	r26, Y+2	; 0x02
 458:	bb 81       	ldd	r27, Y+3	; 0x03
 45a:	28 16       	cp	r2, r24
 45c:	39 06       	cpc	r3, r25
 45e:	4a 06       	cpc	r4, r26
 460:	5b 06       	cpc	r5, r27
 462:	08 f4       	brcc	.+2      	; 0x466 <main+0x246>
 464:	3b cf       	rjmp	.-394    	; 0x2dc <main+0xbc>
				if (key3_pressed ) {
 466:	4e 9b       	sbis	0x09, 6	; 9
 468:	14 c0       	rjmp	.+40     	; 0x492 <main+0x272>
					timer_set( &timer_c2, STROB_TIMEOUT);
 46a:	82 e5       	ldi	r24, 0x52	; 82
 46c:	93 e0       	ldi	r25, 0x03	; 3
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	f3 01       	movw	r30, r6
 474:	80 83       	st	Z, r24
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	a2 83       	std	Z+2, r26	; 0x02
 47a:	b3 83       	std	Z+3, r27	; 0x03
 47c:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 480:	a4 e1       	ldi	r26, 0x14	; 20
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	6d 93       	st	X+, r22
 486:	7d 93       	st	X+, r23
 488:	8d 93       	st	X+, r24
 48a:	9c 93       	st	X, r25
 48c:	13 97       	sbiw	r26, 0x03	; 3
					set_strob3_run;
 48e:	42 9a       	sbi	0x08, 2	; 8
 490:	25 cf       	rjmp	.-438    	; 0x2dc <main+0xbc>
					} else if (key4_pressed) {
 492:	4f 9b       	sbis	0x09, 7	; 9
 494:	23 cf       	rjmp	.-442    	; 0x2dc <main+0xbc>
					timer_set( &timer_c2, STROB_TIMEOUT);
 496:	0f 2e       	mov	r0, r31
 498:	f2 e5       	ldi	r31, 0x52	; 82
 49a:	2f 2e       	mov	r2, r31
 49c:	f3 e0       	ldi	r31, 0x03	; 3
 49e:	3f 2e       	mov	r3, r31
 4a0:	41 2c       	mov	r4, r1
 4a2:	51 2c       	mov	r5, r1
 4a4:	f0 2d       	mov	r31, r0
 4a6:	d3 01       	movw	r26, r6
 4a8:	2d 92       	st	X+, r2
 4aa:	3d 92       	st	X+, r3
 4ac:	4d 92       	st	X+, r4
 4ae:	5c 92       	st	X, r5
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	0e 94 91 00 	call	0x122	; 0x122 <clock_time>
 4b6:	e4 e1       	ldi	r30, 0x14	; 20
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	60 83       	st	Z, r22
 4bc:	71 83       	std	Z+1, r23	; 0x01
 4be:	82 83       	std	Z+2, r24	; 0x02
 4c0:	93 83       	std	Z+3, r25	; 0x03
					set_strob4_run;
 4c2:	43 9a       	sbi	0x08, 3	; 8
 4c4:	0b cf       	rjmp	.-490    	; 0x2dc <main+0xbc>

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
